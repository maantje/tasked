#file: noinspection YAMLSchemaValidation
# Name of your application. Used to uniquely configure containers.
service: go

# Name of the container image.
image: maantje/go-app

# Deploy to these servers.
servers:
  web:
    hosts:
      - 195.201.132.133
    labels:
      traefik.enable: true
      traefik.http.routers.go-web.rule: Host(`go.j4mie.com`)
      traefik.http.routers.go-web.entrypoints: websecure
      traefik.http.routers.go-web.tls.certresolver: letsencrypt


# Credentials for your image host.
registry:
  server: ghcr.io
  username: maantje

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `go env push` after making changes!
env:
  clear:
    DB_DSN: "tasked:tasked@tcp(195.201.132.133:3306)/tasked?charset=utf8mb4&parseTime=True&loc=Local"
    JWT_SECRET: secret
  secret:
    - KAMAL_REGISTRY_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
builder:
  multiarch: false

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: mysql:8.0
    host: 195.201.132.133
    port: 3306
    env:
      clear:
        MYSQL_ROOT_HOST: '%'
      secret:
        - MYSQL_ROOT_PASSWORD
    files:
      - docker/db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/mysql

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - 443:443
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    api: true
    accesslog: true
    accesslog.format: json
    entrypoints.web.address: ':80'
    entrypoints.websecure.address: ':443'
    entrypoints.websecure.http.tls: true
    entrypoints.web.http.redirections.entryPoint.to: websecure
    entrypoints.web.http.redirections.entryPoint.scheme: https
    entrypoints.web.http.redirections.entryPoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "j4mie@hey.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /hello
  port: 8080

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_web_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
# This role should have traefik enabled.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_web_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
